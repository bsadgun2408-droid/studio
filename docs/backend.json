{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the EduVault AI application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's unique username for login."
        },
        "password": {
          "type": "string",
          "description": "User's password for login. Stored securely (e.g., hashed)."
        },
        "email": {
          "type": "string",
          "description": "User's email address for communication.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        },
        "isBanned": {
          "type": "boolean",
          "description": "Indicates whether the user is banned from accessing the application."
        },
        "verificationCode": {
          "type": "string",
          "description": "Verification code sent to the user during registration."
        },
        "isVerified": {
          "type": "boolean",
          "description": "Indicates whether the user has verified their account."
        }
      },
      "required": [
        "id",
        "username",
        "password",
        "email",
        "registrationDate",
        "isBanned",
        "verificationCode",
        "isVerified"
      ]
    },
    "ChatHistory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatHistory",
      "type": "object",
      "description": "Represents a single chat conversation between the user and the AI tutor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat history entry."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ChatHistory)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the message.",
          "format": "date-time"
        },
        "userMessage": {
          "type": "string",
          "description": "The message sent by the user."
        },
        "aiResponse": {
          "type": "string",
          "description": "The response generated by the AI tutor."
        },
        "uploadedFiles": {
          "type": "array",
          "description": "Files uploaded as part of this chat. (Relationship: ChatHistory 1:N FileUpload)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "timestamp",
        "userMessage",
        "aiResponse"
      ]
    },
    "StudyMaterial": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StudyMaterial",
      "type": "object",
      "description": "Represents a study material generated after a conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the study material."
        },
        "chatHistoryId": {
          "type": "string",
          "description": "Reference to ChatHistory. (Relationship: ChatHistory 1:N StudyMaterial)"
        },
        "materialType": {
          "type": "string",
          "description": "Type of study material (e.g., mind map, revision notes, Q&A)."
        },
        "content": {
          "type": "string",
          "description": "The content of the study material (e.g., a JSON representation of a mind map, text of revision notes)."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the study material was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "chatHistoryId",
        "materialType",
        "content",
        "timestamp"
      ]
    },
    "FileUpload": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FileUpload",
      "type": "object",
      "description": "Represents a file uploaded by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the uploaded file."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N FileUpload)"
        },
        "fileName": {
          "type": "string",
          "description": "Name of the uploaded file."
        },
        "fileType": {
          "type": "string",
          "description": "MIME type of the uploaded file."
        },
        "fileSize": {
          "type": "number",
          "description": "Size of the uploaded file in bytes."
        },
        "uploadTimestamp": {
          "type": "string",
          "description": "Timestamp of when the file was uploaded.",
          "format": "date-time"
        },
        "chatHistoryId": {
          "type": "string",
          "description": "Reference to ChatHistory. (Relationship: ChatHistory 1:N FileUpload)"
        },
        "fileContent": {
          "type": "string",
          "description": "Content of the uploaded file (e.g., Base64 encoded string)."
        }
      },
      "required": [
        "id",
        "userId",
        "fileName",
        "fileType",
        "fileSize",
        "uploadTimestamp",
        "fileContent"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an admin user with access to manage users and system settings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin user."
        },
        "username": {
          "type": "string",
          "description": "Admin's username for login."
        },
        "password": {
          "type": "string",
          "description": "Admin's password for login, stored securely (e.g., hashed)."
        },
        "email": {
          "type": "string",
          "description": "Admin's email address for communication.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "username",
        "password",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information.  Each document represents a registered user. Includes fields like username, password (hashed), email, registration date, ban status, verification code, and verification status.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chat_history/{chatHistoryId}",
        "definition": {
          "entityName": "ChatHistory",
          "schema": {
            "$ref": "#/backend/entities/ChatHistory"
          },
          "description": "Stores chat history for each user. Includes the user's message, AI response, timestamp, and IDs of uploaded files.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "chatHistoryId",
              "description": "The unique identifier of the chat history entry."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chat_history/{chatHistoryId}/study_materials/{studyMaterialId}",
        "definition": {
          "entityName": "StudyMaterial",
          "schema": {
            "$ref": "#/backend/entities/StudyMaterial"
          },
          "description": "Stores study materials generated from chat history. Includes the material type, content, and timestamp.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "chatHistoryId",
              "description": "The unique identifier of the chat history entry."
            },
            {
              "name": "studyMaterialId",
              "description": "The unique identifier of the study material."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/file_uploads/{fileUploadId}",
        "definition": {
          "entityName": "FileUpload",
          "schema": {
            "$ref": "#/backend/entities/FileUpload"
          },
          "description": "Stores files uploaded by users. Includes file name, type, size, upload timestamp, and content.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "fileUploadId",
              "description": "The unique identifier of the uploaded file."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Collection indicating admin privileges. The existence of a document in this collection grants admin rights to the corresponding user ID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and debuggability, adhering to the core principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). Authorization Independence is achieved through denormalization. For instance, access control data for chat histories is embedded within the chat history documents themselves, eliminating the need for complex `get()` calls in security rules.\n\nStructural Segregation is applied by separating user data (private) from admin data. User-owned data (chat histories, study materials, and file uploads) are stored in hierarchical paths under the `/users/{userId}` collection, enabling simple path-based security rules. Collaborative data is managed using membership maps where applicable (though not explicitly needed in this scenario). Global roles (admin) are managed using a dedicated collection (`/roles_admin/{uid}`), relying on document existence for role assignment.\n\nThe structure supports the required QAPs by utilizing structural segregation. User-specific data is kept separate, ensuring that `list` operations are secure and do not expose unauthorized data. Admin roles are clearly defined, allowing for secure management of users.\n\nExplicit state modeling is used with the `isBanned` and `isVerified` fields in the `User` entity. Predictable schemas are enforced, and naming conventions are consistent throughout the database structure. This approach simplifies security rules, enhances debuggability, and ensures the integrity of ownership and timestamps."
  }
}
