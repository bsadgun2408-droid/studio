
'use client';

import { useState, useRef, ChangeEvent } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import * as z from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Paperclip,
  Send,
  LoaderCircle,
  Download,
  BookOpenCheck,
  FileText,
  X,
  Sparkles,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { chat } from '@/ai/flows/chat';
import { analyzeUploadedNotes } from '@/ai/flows/analyze-uploaded-notes';
import { generatePersonalizedStudyMaterials, GeneratePersonalizedStudyMaterialsOutput } from '@/ai/flows/generate-personalized-study-materials';
import { jsPDF } from 'jspdf';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Message {
  sender: 'user' | 'ai';
  text: string;
}

interface UploadedFile {
  name: string;
  dataUri: string;
}

const formSchema = z.object({
  prompt: z.string().min(1),
});

export default function DashboardPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      sender: 'ai',
      text: 'Hello! I am EduVault AI. How can I help you today? You can also upload your notes to ask questions about them.',
    },
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [uploadedFile, setUploadedFile] = useState<UploadedFile | null>(null);
  const [studyMaterials, setStudyMaterials] = useState<GeneratePersonalizedStudyMaterialsOutput | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        const dataUri = e.target?.result as string;
        setUploadedFile({ name: file.name, dataUri });
        toast({
            title: "File Uploaded",
            description: `${file.name} is ready. Ask a question about it!`,
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFileUploadClick = () => {
    fileInputRef.current?.click();
  };

  const removeFile = () => {
    setUploadedFile(null);
     if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    toast({
        title: "File Removed",
        description: "The uploaded file has been removed.",
    });
  };

  const handleGenerateStudyMaterials = async () => {
    setIsGenerating(true);
    setStudyMaterials(null);
    toast({
        title: "Generating Study Materials...",
        description: "This may take a moment. The download button will activate when ready.",
    });
    try {
        const conversationHistory = messages.map(m => `${m.sender}: ${m.text}`).join('\n');
        const materials = await generatePersonalizedStudyMaterials({
            conversationHistory,
            studentName: 'Student' 
        });
        setStudyMaterials(materials);
        toast({
            title: "Study Materials Generated!",
            description: "You can now download the materials as a PDF.",
        });
    } catch (error) {
        console.error("Error generating study materials:", error);
        toast({
            variant: "destructive",
            title: "Generation Failed",
            description: "Sorry, I had trouble generating the study materials.",
        });
    } finally {
        setIsGenerating(false);
    }
  }

  const handleDownloadNotes = () => {
    if (!studyMaterials) {
        toast({
            variant: "destructive",
            title: "Nothing to Download",
            description: "Please generate study materials first.",
        });
        return;
    };

    const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
    const margin = 10;
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const usableWidth = pageWidth - margin * 2;
    let y = 20;

    const addWatermark = () => {
        doc.setFontSize(50);
        doc.setTextColor(220, 220, 220);
        doc.text('Generated by EduVault AI', pageWidth / 2, pageHeight / 2, {
            align: 'center',
            angle: -45
        });
        doc.setTextColor(0, 0, 0); // Reset text color
    };

    const checkNewPage = (neededHeight: number) => {
        if (y + neededHeight > pageHeight - margin) {
            doc.addPage();
            addWatermark();
            y = margin;
        }
    };
    
    // Initial page with watermark
    addWatermark();
    
    doc.setFontSize(22);
    doc.text("EduVault AI - Study Materials", pageWidth / 2, y, { align: 'center' });
    y += 15;

    Object.entries(studyMaterials).forEach(([key, value]) => {
        const title = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        
        checkNewPage(12); // Space for title
        doc.setFontSize(16);
        doc.setTextColor(63, 131, 248); // Primary color
        doc.text(title, margin, y);
        y += 8;

        doc.setDrawColor(200, 200, 200);
        doc.line(margin, y, pageWidth - margin, y); // Separator line
        y += 8;
        
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        
        const textLines = doc.splitTextToSize(value, usableWidth);
        
        textLines.forEach((line: string) => {
            checkNewPage(7); // Height for one line
            doc.text(line, margin, y);
            y += 7;
        });

        y += 10; // Extra space between sections
    });

    doc.save('eduvault-ai-study-materials.pdf');
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setStudyMaterials(null); // New message invalidates old materials
    const userMessage: Message = { sender: 'user', text: values.prompt };
    setMessages(prev => [...prev, userMessage]);
    form.reset();

    try {
      let aiResponseText: string;
      if (uploadedFile) {
        const aiResponse = await analyzeUploadedNotes({
          notesDataUri: uploadedFile.dataUri,
          question: values.prompt,
        });
        aiResponseText = aiResponse.answer;
      } else {
        const aiResponse = await chat({ prompt: values.prompt });
        aiResponseText = aiResponse.response;
      }
      setMessages(prev => [...prev, { sender: 'ai', text: aiResponseText }]);
    } catch (error) {
      console.error('Error getting AI response:', error);
      setMessages(prev => [
        ...prev,
        { sender: 'ai', text: "Sorry, I'm having trouble responding right now." },
      ]);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="flex flex-col h-screen bg-background">
      <header className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-2">
          <BookOpenCheck className="w-8 h-8 text-primary" />
          <h1 className="text-xl font-bold font-headline">EduVault AI</h1>
        </div>

        <div className="flex items-center gap-4">
           <Button variant="outline" size="sm" onClick={handleGenerateStudyMaterials} disabled={messages.length <= 1 || isLoading || isGenerating}>
            {isGenerating ? <LoaderCircle className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
            Generate Study Materials
          </Button>
          <Button variant="default" size="sm" onClick={handleDownloadNotes} disabled={!studyMaterials || isGenerating}>
            <Download className="mr-2 h-4 w-4" />
            Download Materials
          </Button>
        </div>
      </header>

      <main className="flex-1 overflow-y-auto p-4 md:p-6 space-y-4">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex items-start gap-3 ${
              msg.sender === 'user' ? 'justify-end' : ''
            }`}
          >
            {msg.sender === 'ai' && (
              <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm">
                AI
              </div>
            )}
            <Card
              className={`max-w-xl ${
                msg.sender === 'user'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-card'
              }`}
            >
              <CardContent className="p-3">
                <p className="whitespace-pre-wrap">{msg.text}</p>
              </CardContent>
            </Card>
            {msg.sender === 'user' && (
              <div className="w-8 h-8 rounded-full bg-accent/20 flex items-center justify-center font-bold text-accent-foreground text-sm">
                U
              </div>
            )}
          </div>
        ))}
        {isLoading && (
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm">
              AI
            </div>
            <Card className="max-w-xl">
              <CardContent className="p-3 flex items-center gap-2">
                <LoaderCircle className="w-5 h-5 animate-spin" />
                <span>Thinking...</span>
              </CardContent>
            </Card>
          </div>
        )}
      </main>

      <footer className="p-4 border-t bg-background">
        {uploadedFile && (
            <div className="mb-2 p-2 bg-muted rounded-md flex items-center justify-between text-sm">
                <div className="flex items-center gap-2">
                    <FileText className="w-4 h-4 text-muted-foreground" />
                    <span className="font-medium truncate max-w-xs">{uploadedFile.name}</span>
                </div>
                <Button variant="ghost" size="icon" onClick={removeFile} className="h-6 w-6">
                    <X className="w-4 h-4" />
                </Button>
            </div>
        )}
        <FormProvider {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex items-center gap-2"
          >
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              className="hidden"
              accept=".txt,.md,.pdf,.doc,.docx"
            />
             <TooltipProvider>
                <Tooltip>
                    <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          type="button"
                          onClick={handleFileUploadClick}
                          disabled={isLoading || !!uploadedFile}
                        >
                          <Paperclip />
                        </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                        <p>Upload a file (.txt, .md, .pdf, .doc, .docx)</p>
                    </TooltipContent>
                </Tooltip>
            </TooltipProvider>
            <Input
              autoComplete="off"
              placeholder={uploadedFile ? "Ask a question about your notes..." : "Ask me anything..."}
              {...form.register('prompt')}
              disabled={isLoading || isGenerating}
            />
            <Button
              variant="default"
              size="icon"
              type="submit"
              disabled={!form.watch('prompt') || isLoading || isGenerating}
            >
              <Send />
            </Button>
          </form>
        </FormProvider>
      </footer>
    </div>
  );
}
