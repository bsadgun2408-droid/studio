
'use client';

import { useState, useRef, ChangeEvent, useEffect } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import * as z from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Paperclip,
  Send,
  LoaderCircle,
  Download,
  BookOpenCheck,
  FileText,
  Map,
  FileCode2,
  HelpCircle,
  ListOrdered,
  Award,
  BrainCircuit,
  History,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { jsPDF } from 'jspdf';
import { useToast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { runChatFlow } from './actions';
import type { ChatOutput } from './types';


type Message = {
  sender: 'user';
  text: string;
} | {
  sender: 'ai';
  content: ChatOutput | string;
} | {
    sender: 'user-file';
    file: UploadedFile;
};


interface UploadedFile {
  name: string;
  dataUri: string;
}

const formSchema = z.object({
  prompt: z.string().min(1),
});

export default function DashboardPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      sender: 'ai',
      content: 'Hello! I am EduVault AI. How can I help you today? For every question, I will generate a complete set of study materials. You can also upload your notes to ask questions about them.',
    },
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [uploadedFile, setUploadedFile] = useState<UploadedFile | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

    useEffect(() => {
        if (uploadedFile) {
            const fileMessage: Message = { sender: 'user-file', file: uploadedFile };
            setMessages(prev => [...prev, fileMessage]);

            toast({
                title: "File Uploaded",
                description: `${uploadedFile.name} is ready. Ask a question about it!`,
            });
            
            if (fileInputRef.current) {
                fileInputRef.current.value = "";
            }
        }
    }, [uploadedFile, toast]);

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        const dataUri = e.target?.result as string;
        setUploadedFile({ name: file.name, dataUri });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFileUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleDownloadNotes = (materialsToDownload: ChatOutput) => {
    if (!materialsToDownload || typeof materialsToDownload !== 'object' || 'answer' in materialsToDownload) {
        toast({
            variant: "destructive",
            title: "Nothing to Download",
            description: "There are no study materials in this message.",
        });
        return;
    };

    const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
    const margin = 10;
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const usableWidth = pageWidth - margin * 2;
    let y = 20;

    const addWatermark = () => {
      doc.setFontSize(50);
      doc.setTextColor(220, 220, 220);
      doc.text('Generated by EduVault AI', pageWidth / 2, pageHeight / 2, {
          align: 'center',
          angle: -45
      });
      doc.setTextColor(0, 0, 0); // Reset text color
    };

    const checkNewPage = (neededHeight: number) => {
        if (y + neededHeight > pageHeight - margin) {
            doc.addPage();
            addWatermark();
            y = margin;
        }
    };
    
    // Initial page with watermark
    addWatermark();
    
    doc.setFontSize(22);
    doc.text("EduVault AI - Study Materials", pageWidth / 2, y, { align: 'center' });
    y += 15;

    Object.entries(materialsToDownload).forEach(([key, value]) => {
      if (!value) return; // Skip empty sections

        const title = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        
        checkNewPage(12); // Space for title
        doc.setFontSize(16);
        doc.setTextColor(63, 131, 248); // Primary color
        doc.text(title, margin, y);
        y += 8;

        doc.setDrawColor(200, 200, 200);
        doc.line(margin, y, pageWidth - margin, y); // Separator line
        y += 8;
        
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        
        let textToRender = '';
        if (key === 'keywords' && Array.isArray(value)) {
            textToRender = value.map(kw => `**${kw.keyword}:** ${kw.definition}`).join('\n\n');
        } else if (typeof value === 'string') {
            textToRender = value;
        }

        if (textToRender) {
            const textLines = doc.splitTextToSize(textToRender, usableWidth);
            
            textLines.forEach((line: string) => {
                checkNewPage(7); // Height for one line
                doc.text(line, margin, y);
                y += 7;
            });
        }

        y += 10; // Extra space between sections
    });

    doc.save('eduvault-ai-study-materials.pdf');
    toast({
      title: "Download Complete",
      description: "Your study materials have been saved as a PDF.",
    });
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    const userMessage: Message = { sender: 'user', text: values.prompt };
    
    setMessages(prev => [...prev, userMessage]);
    
    const conversationHistory = messages
      .map(m => {
        if (m.sender === 'user') {
          return `User: ${m.text}`;
        } else if (m.sender === 'ai' && typeof m.content === 'string') {
          return `AI: ${m.content}`;
        } else if (m.sender === 'ai' && typeof m.content === 'object') {
          return `AI: ${JSON.stringify(m.content)}`;
        }
        return '';
      })
      .join('\n');

    form.reset();

    try {
        const response = await runChatFlow({ 
            prompt: values.prompt, 
            conversationHistory,
            notesDataUri: uploadedFile?.dataUri,
        });
        const aiResponse: Message = { sender: 'ai', content: response };
        setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error getting AI response:', error);
      setMessages(prev => [
        ...prev,
        { sender: 'ai', content: "Sorry, I'm having trouble responding right now." },
      ]);
    } finally {
      setIsLoading(false);
      if (uploadedFile) {
        setUploadedFile(null);
      }
    }
  }

  const studyMaterialSections = [
    { key: 'mindMap', title: 'Mind Map', icon: Map, color: 'text-blue-500' },
    { key: 'revisionNotes', title: 'Revision Notes', icon: FileCode2, color: 'text-green-500' },
    { key: 'questionsAndAnswers', title: 'Q&A for Self-Assessment', icon: HelpCircle, color: 'text-yellow-500' },
    { key: 'keywords', title: 'Keywords & Definitions', icon: ListOrdered, color: 'text-purple-500' },
    { key: 'cbseMarkingScheme', title: 'CBSE Marking Scheme', icon: Award, color: 'text-red-500' },
    { key: 'mnemonics', title: 'Mnemonics', icon: BrainCircuit, color: 'text-indigo-500' },
    { key: 'pyqs', title: 'Previous Year Questions', icon: History, color: 'text-teal-500' },
  ];

  const renderAiMessage = (content: ChatOutput | string) => {
    if (typeof content === 'string') {
      return <p className="whitespace-pre-wrap">{content}</p>;
    }
    
    // Handle the case where the AI returns a simple answer instead of study materials
    if ('answer' in content && typeof content.answer === 'string') {
        return <p className="whitespace-pre-wrap">{content.answer}</p>;
    }

    const hasContent = studyMaterialSections.some(section => {
        const sectionContent = content[section.key as keyof ChatOutput];
        return Array.isArray(sectionContent) ? sectionContent.length > 0 : !!sectionContent;
    });

    if (!hasContent) {
        return <p className="whitespace-pre-wrap">I was unable to generate study materials for this topic.</p>;
    }

    return (
      <div className="space-y-4">
        {studyMaterialSections.map(section => {
          const sectionContent = content[section.key as keyof ChatOutput];
          if (!sectionContent) return null;

          const Icon = section.icon;

          let renderedContent;
          if (section.key === 'keywords' && Array.isArray(sectionContent)) {
              if (sectionContent.length === 0) return null;
              renderedContent = (
                  <ul className="space-y-2">
                      {sectionContent.map((item, index) => (
                          <li key={index}>
                              <strong className="font-semibold">{item.keyword}:</strong> {item.definition}
                          </li>
                      ))}
                  </ul>
              );
          } else if (typeof sectionContent === 'string') {
              renderedContent = sectionContent;
          } else {
              return null;
          }

          return (
            <Card key={section.key} className="bg-card/50 overflow-hidden">
              <CardHeader className="flex flex-row items-center gap-3 p-4 bg-muted/50 border-b">
                <Icon className={`w-6 h-6 ${section.color}`} />
                <CardTitle className="text-lg">{section.title}</CardTitle>
              </CardHeader>
              <CardContent className="p-4 prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap">
                {renderedContent}
              </CardContent>
            </Card>
          );
        })}
      </div>
    );
  };


  return (
    <div className="flex flex-col h-screen bg-background">
      <header className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-2">
          <BookOpenCheck className="w-8 h-8 text-primary" />
          <h1 className="text-xl font-bold font-headline">EduVault AI</h1>
        </div>
      </header>

      <main className="flex-1 overflow-y-auto p-4 md:p-6 space-y-4">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex items-start gap-3 ${
              msg.sender === 'user' || msg.sender === 'user-file' ? 'justify-end' : ''
            }`}
          >
            {msg.sender === 'ai' && (
              <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm flex-shrink-0">
                AI
              </div>
            )}
            <Card
              className={`max-w-2xl w-full ${
                msg.sender === 'user' || msg.sender === 'user-file'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-card'
              }`}
            >
              <CardContent className="p-3">
                {msg.sender === 'user' && <p className="whitespace-pre-wrap">{msg.text}</p>}
                {msg.sender === 'user-file' && (
                    <div className="flex items-center gap-2">
                        <FileText className="w-4 h-4" />
                        <span className="font-medium truncate">{msg.file.name}</span>
                    </div>
                )}
                {msg.sender === 'ai' && renderAiMessage(msg.content)}
                 {msg.sender === 'ai' && typeof msg.content === 'object' && !('answer' in msg.content) && (
                  <div className="mt-4 flex justify-end">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDownloadNotes(msg.content as ChatOutput)}
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Download PDF
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
            {(msg.sender === 'user' || msg.sender === 'user-file') && (
              <div className="w-8 h-8 rounded-full bg-accent/20 flex items-center justify-center font-bold text-accent-foreground text-sm flex-shrink-0">
                U
              </div>
            )}
          </div>
        ))}
        {isLoading && (
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm flex-shrink-0">
              AI
            </div>
            <Card className="max-w-xl">
              <CardContent className="p-3 flex items-center gap-2">
                <LoaderCircle className="w-5 h-5 animate-spin" />
                <span>Thinking...</span>
              </CardContent>
            </Card>
          </div>
        )}
      </main>

      <footer className="p-4 border-t bg-background">
        <FormProvider {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex items-center gap-2"
          >
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              className="hidden"
              accept=".txt,.md,.pdf,.doc,.docx,.png,.jpg,.jpeg,.gif,.webp"
            />
             <TooltipProvider>
                <Tooltip>
                    <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          type="button"
                          onClick={handleFileUploadClick}
                          disabled={isLoading}
                        >
                          <Paperclip />
                        </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                        <p>Upload a file to ask questions about it.</p>
                    </TooltipContent>
                </Tooltip>
            </TooltipProvider>
            <Input
              autoComplete="off"
              placeholder={uploadedFile ? "Ask a question about your notes..." : "Ask me anything to get study materials..."}
              {...form.register('prompt')}
              disabled={isLoading}
            />
            <Button
              variant="default"
              size="icon"
              type="submit"
              disabled={!form.watch('prompt') || isLoading}
            >
              <Send />
            </Button>
          </form>
        </FormProvider>
        <div className="text-center mt-2">
            <AlertDialog>
                <AlertDialogTrigger asChild>
                    <Button variant="link" className="text-xs text-muted-foreground">Disclaimer</Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Disclaimer</AlertDialogTitle>
                        <AlertDialogDescription className="space-y-4 text-left">
                            <p>1. This content is generated by artificial intelligence using the Gemini API. We do not guarantee the accuracy, completeness, or legality of the information or content produced by the AI. The responsibility for ensuring that any AI-generated content does not violate copyright laws rests solely with the user. The owner/developer is not liable for any copyright or legal issues resulting from AI outputs.</p>
                            <p>2. The content produced here is automatically generated by AI technology (Gemini API). All outputs are provided as-is for informational purposes only. We disclaim any responsibility or liability for any copyright infringement or legal issues caused by user reliance on this content.</p>
                            <p>3. This application uses AI services to create content. While efforts are made to ensure quality and legality, the AI may inadvertently generate or reproduce copyrighted material. Users are fully responsible for how they use or share AI-generated content, and must verify its legality. The owner does not assume any liability for the use of AI-generated material.</p>
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogAction>I Understand</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
      </footer>
    </div>
  );
}

    