
'use client';

import { useState, useRef, ChangeEvent } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import * as z from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Paperclip,
  Send,
  LoaderCircle,
  Download,
  BookOpenCheck,
  FileText,
  X,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { chat, ChatInput } from '@/ai/flows/chat';
import { analyzeUploadedNotes } from '@/ai/flows/analyze-uploaded-notes';
import { jsPDF } from 'jspdf';

interface Message {
  sender: 'user' | 'ai';
  text: string;
}

interface UploadedFile {
  name: string;
  dataUri: string;
}

const formSchema = z.object({
  prompt: z.string().min(1),
});

export default function DashboardPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      sender: 'ai',
      text: 'Hello! I am EduVault AI. How can I help you today? Upload your notes to ask questions about them.',
    },
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [uploadedFile, setUploadedFile] = useState<UploadedFile | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        const dataUri = e.target?.result as string;
        setUploadedFile({ name: file.name, dataUri });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFileUploadClick = () => {
    fileInputRef.current?.click();
  };

  const removeFile = () => {
    setUploadedFile(null);
     if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleDownloadNotes = () => {
    const doc = new jsPDF();
    const margin = 10;
    let y = 20;

    // Watermark
    doc.setFontSize(50);
    doc.setTextColor(230, 230, 230);
    doc.text('Generated by EduVault AI', doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() / 2, {
        align: 'center',
        angle: -45
    });

    // Content
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text("EduVault AI - Chat Summary", margin, y);
    y += 10;
    
    messages.forEach(msg => {
        if (y > 280) { // Check for new page
            doc.addPage();
            y = margin;
             // Re-add watermark on new page
            doc.setFontSize(50);
            doc.setTextColor(230, 230, 230);
            doc.text('Generated by EduVault AI', doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() / 2, {
                align: 'center',
                angle: -45
            });
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
        }
        const prefix = msg.sender === 'user' ? 'You: ' : 'AI: ';
        const textLines = doc.splitTextToSize(prefix + msg.text, doc.internal.pageSize.getWidth() - margin * 2);
        doc.text(textLines, margin, y);
        y += textLines.length * 7 + 5;
    });

    doc.save('eduvault-ai-notes.pdf');
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    const userMessage: Message = { sender: 'user', text: values.prompt };
    setMessages(prev => [...prev, userMessage]);
    form.reset();

    try {
      let aiResponseText: string;
      if (uploadedFile) {
        const aiResponse = await analyzeUploadedNotes({
          notesDataUri: uploadedFile.dataUri,
          question: values.prompt,
        });
        aiResponseText = aiResponse.answer;
      } else {
        const aiResponse = await chat({ prompt: values.prompt });
        aiResponseText = aiResponse.response;
      }
      setMessages(prev => [...prev, { sender: 'ai', text: aiResponseText }]);
    } catch (error) {
      console.error('Error getting AI response:', error);
      setMessages(prev => [
        ...prev,
        { sender: 'ai', text: "Sorry, I'm having trouble responding right now." },
      ]);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="flex flex-col h-screen bg-background">
      <header className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-2">
          <BookOpenCheck className="w-8 h-8 text-primary" />
          <h1 className="text-xl font-bold font-headline">EduVault AI</h1>
        </div>

        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm" onClick={handleDownloadNotes} disabled={messages.length <= 1}>
            <Download className="mr-2 h-4 w-4" />
            Download Notes
          </Button>
        </div>
      </header>

      <main className="flex-1 overflow-y-auto p-4 md:p-6 space-y-4">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex items-start gap-3 ${
              msg.sender === 'user' ? 'justify-end' : ''
            }`}
          >
            {msg.sender === 'ai' && (
              <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm">
                AI
              </div>
            )}
            <Card
              className={`max-w-xl ${
                msg.sender === 'user'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-card'
              }`}
            >
              <CardContent className="p-3">
                <p>{msg.text}</p>
              </CardContent>
            </Card>
            {msg.sender === 'user' && (
              <div className="w-8 h-8 rounded-full bg-accent/20 flex items-center justify-center font-bold text-accent-foreground text-sm">
                U
              </div>
            )}
          </div>
        ))}
        {isLoading && (
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center font-bold text-primary text-sm">
              AI
            </div>
            <Card className="max-w-xl">
              <CardContent className="p-3 flex items-center gap-2">
                <LoaderCircle className="w-5 h-5 animate-spin" />
                <span>Thinking...</span>
              </CardContent>
            </Card>
          </div>
        )}
      </main>

      <footer className="p-4 border-t bg-background">
        {uploadedFile && (
            <div className="mb-2 p-2 bg-muted rounded-md flex items-center justify-between text-sm">
                <div className="flex items-center gap-2">
                    <FileText className="w-4 h-4 text-muted-foreground" />
                    <span className="font-medium truncate max-w-xs">{uploadedFile.name}</span>
                </div>
                <Button variant="ghost" size="icon" onClick={removeFile} className="h-6 w-6">
                    <X className="w-4 h-4" />
                </Button>
            </div>
        )}
        <FormProvider {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex items-center gap-2"
          >
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              className="hidden"
              accept=".txt,.md,.pdf,.doc,.docx"
            />
            <Button
              variant="ghost"
              size="icon"
              type="button"
              onClick={handleFileUploadClick}
              disabled={isLoading || !!uploadedFile}
            >
              <Paperclip />
            </Button>
            <Input
              autoComplete="off"
              placeholder={uploadedFile ? "Ask a question about your notes..." : "Ask me anything..."}
              {...form.register('prompt')}
              disabled={isLoading}
            />
            <Button
              variant="default"
              size="icon"
              type="submit"
              disabled={isLoading}
            >
              <Send />
            </Button>
          </form>
        </FormProvider>
      </footer>
    </div>
  );
